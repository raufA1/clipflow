version: '3.8'

services:
  clipflow:
    build: .
    container_name: clipflow_app
    restart: unless-stopped
    volumes:
      - ./data:/app/data
      - ./temp:/app/temp
      - ./logs:/app/logs
    environment:
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - YOUTUBE_CLIENT_ID=${YOUTUBE_CLIENT_ID}
      - YOUTUBE_CLIENT_SECRET=${YOUTUBE_CLIENT_SECRET}
      - YOUTUBE_ACCESS_TOKEN=${YOUTUBE_ACCESS_TOKEN}
      - INSTAGRAM_ACCESS_TOKEN=${INSTAGRAM_ACCESS_TOKEN}
      - INSTAGRAM_APP_ID=${INSTAGRAM_APP_ID}
      - INSTAGRAM_APP_SECRET=${INSTAGRAM_APP_SECRET}
      - TIKTOK_CLIENT_KEY=${TIKTOK_CLIENT_KEY}
      - TIKTOK_CLIENT_SECRET=${TIKTOK_CLIENT_SECRET}
      - TIKTOK_ACCESS_TOKEN=${TIKTOK_ACCESS_TOKEN}
      - CLIPFLOW_TIMEZONE=${CLIPFLOW_TIMEZONE:-Asia/Baku}
      - CLIPFLOW_USE_ENV=true
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      - redis
    networks:
      - clipflow_network
    labels:
      - "com.clipflow.service=app"
      - "com.clipflow.version=1.0.0"

  redis:
    image: redis:7-alpine
    container_name: clipflow_redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
    networks:
      - clipflow_network
    command: redis-server --appendonly yes
    labels:
      - "com.clipflow.service=redis"

  # Optional: Add this if you want to use PostgreSQL instead of SQLite
  # postgres:
  #   image: postgres:15-alpine
  #   container_name: clipflow_postgres
  #   restart: unless-stopped
  #   environment:
  #     - POSTGRES_DB=clipflow
  #     - POSTGRES_USER=clipflow
  #     - POSTGRES_PASSWORD=${DB_PASSWORD}
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   networks:
  #     - clipflow_network
  #   labels:
  #     - "com.clipflow.service=database"

  # Optional: Monitoring with Prometheus
  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: clipflow_prometheus
  #   restart: unless-stopped
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
  #     - prometheus_data:/prometheus
  #   networks:
  #     - clipflow_network
  #   labels:
  #     - "com.clipflow.service=monitoring"

volumes:
  redis_data:
  # postgres_data:
  # prometheus_data:

networks:
  clipflow_network:
    driver: bridge
    labels:
      - "com.clipflow.network=main"